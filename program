use std::collections::HashMap;
use std::io;

struct Employee {
    employee_id: String,
    employee_name: String,
    email: String,
    age: u32,
    phone_number: String,
}

impl Employee {
    fn new(
        employee_id: String,
        employee_name: String,
        email: String,
        age: u32,
        phone_number: String,
    ) -> Self {
        Employee {
            employee_id,
            employee_name,
            email,
            age,
            phone_number,
        }
    }
}

fn main() {
    let mut employees: Vec<Employee> = Vec::new();

    loop {
        println!("Enter employee details:");
        println!("Employee Name:");
        let mut employee_name = String::new();
        io::stdin()
            .read_line(&mut employee_name)
            .expect("Failed to read line");

        println!("Employee ID:");
        let mut employee_id = String::new();
        io::stdin().read_line(&mut employee_id).expect("Failed to read line");

        println!("Email:");
        let mut email = String::new();
        io::stdin().read_line(&mut email).expect("Failed to read line");

        println!("Age:");
        let mut age = String::new();
        io::stdin().read_line(&mut age).expect("Failed to read line");
        let age: u32 = age.trim().parse().expect("Invalid age input");

        println!("Phone Number:");
        let mut phone_number = String::new();
        io::stdin()
            .read_line(&mut phone_number)
            .expect("Failed to read line");

        let employee = Employee::new(
            employee_id.trim().to_string(),
            employee_name.trim().to_string(),
            email.trim().to_string(),
            age,
            phone_number.trim().to_string(),
        );

        employees.push(employee);

        println!("Do you want to enter another employee? (y/n)");
        let mut input = String::new();
        io::stdin().read_line(&mut input).expect("Failed to read line");
        if input.trim().to_lowercase() != "y" {
            break;
        }
    }

    let employees_by_id: HashMap<&str, &Employee> =
        employees.iter().map(|e| (e.employee_id.as_str(), e)).collect();

    println!("Enter an employee ID to get details:");
    let mut input_id = String::new();
    io::stdin().read_line(&mut input_id).expect("Failed to read line");
    let input_id = input_id.trim();

    if let Some(employee) = employees_by_id.get(input_id) {
        println!(
            "Employee found: {} (ID: {}, Email: {}, Age: {}, Phone: {})",
            employee.employee_name, employee.employee_id, employee.email, employee.age, employee.phone_number
        );
    } else {
        println!("Employee not found with the given ID.");
    }

    println!("Enter an age to get employees with the same age:");
    let mut input_age = String::new();
    io::stdin().read_line(&mut input_age).expect("Failed to read line");
    let input_age: u32 = input_age.trim().parse().expect("Invalid age input");

    let employees_with_same_age: Vec<&Employee> =
        employees.iter().filter(|e| e.age == input_age).collect();

    if employees_with_same_age.is_empty() {
        println!("No employees found with the given age.");
    } else {
        println!("Employees with age {}:", input_age);
        for employee in employees_with_same_age {
            println!(
                "Name: {} (ID: {}, Email: {}, Phone: {})",
                employee.employee_name, employee.employee_id, employee.email, employee.phone_number
            );
        }
    }
}
